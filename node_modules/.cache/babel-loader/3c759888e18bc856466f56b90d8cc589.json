{"ast":null,"code":"import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\n\nconst getLeftTime = async (id, throttle, storage) => {\n  const lastTime = Number((await storage.get(id)) || 0);\n  return throttle - Date.now() + lastTime;\n};\n\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n  if (!options.throttle || !storage) {\n    return false;\n  }\n\n  validateLimitRateParams(options.throttle, options.id);\n  const id = options.id || defaultID;\n  const leftTime = await getLeftTime(id, options.throttle, storage);\n\n  if (leftTime > 0) {\n    return true;\n  }\n\n  await storage.set(id, Date.now().toString());\n  return false;\n};","map":{"version":3,"sources":["C:/Users/Muyagane Harmony/Documents/GitHub/react-portfolio/node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js"],"names":["validateLimitRateParams","getLeftTime","id","throttle","storage","lastTime","Number","get","Date","now","isLimitRateHit","defaultID","options","leftTime","set","toString"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,oDAAxC;;AACA,MAAMC,WAAW,GAAG,OAAOC,EAAP,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;AACjD,QAAMC,QAAQ,GAAGC,MAAM,CAAC,CAAC,MAAMF,OAAO,CAACG,GAAR,CAAYL,EAAZ,CAAP,KAA2B,CAA5B,CAAvB;AACA,SAAOC,QAAQ,GAAGK,IAAI,CAACC,GAAL,EAAX,GAAwBJ,QAA/B;AACH,CAHD;;AAIA,OAAO,MAAMK,cAAc,GAAG,OAAOC,SAAP,EAAkBC,OAAlB,EAA2BR,OAA3B,KAAuC;AACjE,MAAI,CAACQ,OAAO,CAACT,QAAT,IAAqB,CAACC,OAA1B,EAAmC;AAC/B,WAAO,KAAP;AACH;;AACDJ,EAAAA,uBAAuB,CAACY,OAAO,CAACT,QAAT,EAAmBS,OAAO,CAACV,EAA3B,CAAvB;AACA,QAAMA,EAAE,GAAGU,OAAO,CAACV,EAAR,IAAcS,SAAzB;AACA,QAAME,QAAQ,GAAG,MAAMZ,WAAW,CAACC,EAAD,EAAKU,OAAO,CAACT,QAAb,EAAuBC,OAAvB,CAAlC;;AACA,MAAIS,QAAQ,GAAG,CAAf,EAAkB;AACd,WAAO,IAAP;AACH;;AACD,QAAMT,OAAO,CAACU,GAAR,CAAYZ,EAAZ,EAAgBM,IAAI,CAACC,GAAL,GAAWM,QAAX,EAAhB,CAAN;AACA,SAAO,KAAP;AACH,CAZM","sourcesContent":["import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n"]},"metadata":{},"sourceType":"module"}